{"name": "test_add_supplier_cards_02[10.验证新增供应商结算周期为周结,成功]", "status": "broken", "statusDetails": {"message": "pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on '10.40.2.23' (timed out)\")", "trace": "self = <pymysql.connections.Connection object at 0x0000027BE6296F28>, sock = None\n\n    def connect(self, sock=None):\n        self._closed = False\n        try:\n            if sock is None:\n                if self.unix_socket:\n                    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                    sock.settimeout(self.connect_timeout)\n                    sock.connect(self.unix_socket)\n                    self.host_info = \"Localhost via UNIX socket\"\n                    self._secure = True\n                    if DEBUG: print('connected using unix_socket')\n                else:\n                    kwargs = {}\n                    if self.bind_address is not None:\n                        kwargs['source_address'] = (self.bind_address, 0)\n                    while True:\n                        try:\n                            sock = socket.create_connection(\n                                (self.host, self.port), self.connect_timeout,\n>                               **kwargs)\n\nd:\\python3\\lib\\site-packages\\pymysql\\connections.py:571: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('10.40.2.23', 5707), timeout = 10, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n>           raise err\n\nd:\\python3\\lib\\socket.py:722: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('10.40.2.23', 5707), timeout = 10, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               socket.timeout: timed out\n\nd:\\python3\\lib\\socket.py:713: timeout\n\nDuring handling of the above exception, another exception occurred:\n\nself = <case.DF_project.DF_supplier.test_supplier.TestClass_card object at 0x0000027BE62914A8>, df_login_xadmin = <requests.sessions.Session object at 0x0000027BE6273E10>\ndelete_register = None, delete_account_infor = None, delete_cards_infor = None, delete_changing_code = None, supplierFullName = '深圳大源源呐939', businessType = '4', supplierType = '3'\nsupplierStatus = '1', returnSupplier = '1', contacts = '22222', contactsPhone = '18571519920', remark = '', bizType = 'TO_C', supplierCode = '9999013', supplierShortName = '11111'\ntaxType = 'Z1', plannedDeliveryTime = '1', minOrderAmount = '0', orderCalendar = '23', manualPriceRevision = '1', autoConfirmOrders = '0', settleCompany = '10039', payType = '1'\ndrawer = '', settlePeriod = '2', settleMethod = '1', accountPeriodStartDay = '0', accountPeriod = '30', grossProfitCompensate = '2', paymentFreeze = '0', generateZeroSettleSheet = '0'\ncheckStock = '0', checkCost = '0', expected = {'code': 0, 'data': '操作成功', 'message': 'None', 'succ': True}\n\n    @pytest.mark.parametrize(\"supplierFullName,businessType,supplierType,supplierStatus,returnSupplier,\"\n                            \"contacts,contactsPhone,remark,bizType,supplierCode,supplierShortName,taxType,\"\n                             \"plannedDeliveryTime,minOrderAmount,orderCalendar,manualPriceRevision,\"\n                             \"autoConfirmOrders,settleCompany,payType,drawer,settlePeriod,settleMethod,accountPeriodStartDay,\"\n                             \"accountPeriod,grossProfitCompensate,paymentFreeze,generateZeroSettleSheet,checkStock,checkCost,expected\",\n                             add_supplier_info_data,\n                             ids=[\n                                    \"1.验证新增商品类供应商卡号，成功\",\n                                    \"2,验证新增内部供应商卡号，成功\",\n                                    \"3,验证新增资产类供应商卡号，成功\",\n                                    \"4,验证新增备品类供应商卡号，成功\",\n                                    \"5,验证新增行销类供应商卡号，成功\",\n                                    \"6.新增商品类供应商且经营类型为经销（含DC配送）,成功\",\n                                    \"7.验证新增商品类供应商且经营类型为联营，成功\",\n                                    \"8.验证新增商品类供应商且经营类型为租贷，成功\",\n                                    \"9.验证新增商品类供应商且经营类型为自有，成功\",\n                                    \"10.验证新增供应商结算周期为周结,成功\",\n                                    \"11.验证新增供应商结算周期枚举值为月结\",\n                                    \"12.验证新增供应商结算周期枚举值为半月结\",\n                                    \"13.验证新增供应商结算周期枚举值为日结\",\n                                    \"14.验证新增供应商结算周期枚举值为十天结\",\n                                    \"15.验证新增供应商结算方式枚举值为手动结算\",\n                                    \"16.验证新增供应商结算方式枚举值为自动结算\",\n                                    \"17.验证新增供应商结付款方式枚举值为自现金/支票付款\",\n                                    \"18.验证新增供应商结付款方式枚举值为自银行转账\",\n                                    \"19.验证新增供应商结付款方式枚举值为自bill of exchange(bank)\",\n                                    \"20.验证新增供应商结付款方式枚举值为自代租贷商户卡款返还\",\n                                    \"21.验证新增供应商结付款方式枚举值为自电商供应商支付\",\n                                    \"22.验证新增供应商结付款方式枚举值为自现金发放\",\n                                    \"23.验证新增供应商结付款方式枚举值为自个人账扣\",\n                                    \"24.验证新增供应商结付款方式枚举值为自账扣\"\n    \n                                  ])\n    @allure.story(\"新增供应商卡号\")\n    @allure.severity(\"normal\")\n    def test_add_supplier_cards_02(self,df_login_xadmin,delete_register,delete_account_infor,delete_cards_infor,delete_changing_code,supplierFullName,businessType,supplierType,supplierStatus,\n                                   returnSupplier,contacts,contactsPhone,remark,bizType,\n                                   supplierCode,supplierShortName,taxType,\n                                   plannedDeliveryTime,minOrderAmount,orderCalendar,\n                                   manualPriceRevision,autoConfirmOrders,settleCompany,payType,\n                                   drawer,settlePeriod,settleMethod,accountPeriodStartDay,accountPeriod,\n                                   grossProfitCompensate,paymentFreeze,generateZeroSettleSheet,checkStock,\n                                   checkCost,expected):\n        '''\n        验证新增卡号数据的有效性\n        '''\n        with allure.step(\"step1 :登录\"):\n            s = df_login_xadmin\n            DF_Login(s)\n        with allure.step(\"step2 :点击新增卡号按钮\"):\n            save_supplier_information(s)\n>           kk = check_supplier_information(s)    # 公司信息档案详情\n\nDF_supplier\\test_supplier.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nDF_supplier\\supplier.py:65: in check_supplier_information\n    delete_register()\nDF_supplier\\supplier.py:21: in delete_register\n    delete_db(db=db_connect(), sql_delete=sql)\n..\\VC_project\\connect_mysql.py:12: in db_connect\n    db=\"df_vc_basemanage_supplier\"\nd:\\python3\\lib\\site-packages\\pymysql\\__init__.py:94: in Connect\n    return Connection(*args, **kwargs)\nd:\\python3\\lib\\site-packages\\pymysql\\connections.py:327: in __init__\n    self.connect()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pymysql.connections.Connection object at 0x0000027BE6296F28>, sock = None\n\n    def connect(self, sock=None):\n        self._closed = False\n        try:\n            if sock is None:\n                if self.unix_socket:\n                    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                    sock.settimeout(self.connect_timeout)\n                    sock.connect(self.unix_socket)\n                    self.host_info = \"Localhost via UNIX socket\"\n                    self._secure = True\n                    if DEBUG: print('connected using unix_socket')\n                else:\n                    kwargs = {}\n                    if self.bind_address is not None:\n                        kwargs['source_address'] = (self.bind_address, 0)\n                    while True:\n                        try:\n                            sock = socket.create_connection(\n                                (self.host, self.port), self.connect_timeout,\n                                **kwargs)\n                            break\n                        except (OSError, IOError) as e:\n                            if e.errno == errno.EINTR:\n                                continue\n                            raise\n                    self.host_info = \"socket %s:%d\" % (self.host, self.port)\n                    if DEBUG: print('connected using socket')\n                    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n                sock.settimeout(None)\n    \n            self._sock = sock\n            self._rfile = _makefile(sock, 'rb')\n            self._next_seq_id = 0\n    \n            self._get_server_information()\n            self._request_authentication()\n    \n            if self.sql_mode is not None:\n                c = self.cursor()\n                c.execute(\"SET sql_mode=%s\", (self.sql_mode,))\n    \n            if self.init_command is not None:\n                c = self.cursor()\n                c.execute(self.init_command)\n                c.close()\n                self.commit()\n    \n            if self.autocommit_mode is not None:\n                self.autocommit(self.autocommit_mode)\n        except BaseException as e:\n            self._rfile = None\n            if sock is not None:\n                try:\n                    sock.close()\n                except:  # noqa\n                    pass\n    \n            if isinstance(e, (OSError, IOError, socket.error)):\n                exc = err.OperationalError(\n                        2003,\n                        \"Can't connect to MySQL server on %r (%s)\" % (\n                            self.host, e))\n                # Keep original exception and traceback to investigate error.\n                exc.original_exception = e\n                exc.traceback = traceback.format_exc()\n                if DEBUG: print(exc.traceback)\n>               raise exc\nE               pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on '10.40.2.23' (timed out)\")\n\nd:\\python3\\lib\\site-packages\\pymysql\\connections.py:619: OperationalError"}, "description": "\n        验证新增卡号数据的有效性\n        ", "steps": [{"name": "step1 :登录", "status": "passed", "start": 1605236175828, "stop": 1605236175913}, {"name": "step2 :点击新增卡号按钮", "status": "broken", "statusDetails": {"message": "pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on '10.40.2.23' (timed out)\")\n", "trace": "  File \"D:\\Dmall_project\\case\\DF_project\\DF_supplier\\test_supplier.py\", line 468, in test_add_supplier_cards_02\n    kk = check_supplier_information(s)    # 公司信息档案详情\n  File \"D:\\Dmall_project\\case\\DF_project\\DF_supplier\\supplier.py\", line 65, in check_supplier_information\n    delete_register()\n  File \"D:\\Dmall_project\\case\\DF_project\\DF_supplier\\supplier.py\", line 21, in delete_register\n    delete_db(db=db_connect(), sql_delete=sql)\n  File \"D:\\Dmall_project\\case\\VC_project\\connect_mysql.py\", line 12, in db_connect\n    db=\"df_vc_basemanage_supplier\"\n  File \"d:\\python3\\lib\\site-packages\\pymysql\\__init__.py\", line 94, in Connect\n    return Connection(*args, **kwargs)\n  File \"d:\\python3\\lib\\site-packages\\pymysql\\connections.py\", line 327, in __init__\n    self.connect()\n  File \"d:\\python3\\lib\\site-packages\\pymysql\\connections.py\", line 619, in connect\n    raise exc\n"}, "start": 1605236175913, "stop": 1605236186079}], "attachments": [{"name": "stdout", "source": "0df70c0f-e62d-47f6-b9c2-774578796187-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "supplierFullName", "value": "'深圳大源源呐939'"}, {"name": "businessType", "value": "'4'"}, {"name": "supplierType", "value": "'3'"}, {"name": "supplierStatus", "value": "'1'"}, {"name": "returnSupplier", "value": "'1'"}, {"name": "contacts", "value": "'22222'"}, {"name": "contactsPhone", "value": "'18571519920'"}, {"name": "remark", "value": "''"}, {"name": "bizType", "value": "'TO_C'"}, {"name": "supplierCode", "value": "'9999013'"}, {"name": "supplierShortName", "value": "'11111'"}, {"name": "taxType", "value": "'Z1'"}, {"name": "plannedDeliveryTime", "value": "'1'"}, {"name": "minOrderAmount", "value": "'0'"}, {"name": "orderCalendar", "value": "'23'"}, {"name": "manualPriceRevision", "value": "'1'"}, {"name": "autoConfirmOrders", "value": "'0'"}, {"name": "settleCompany", "value": "'10039'"}, {"name": "payType", "value": "'1'"}, {"name": "drawer", "value": "''"}, {"name": "settlePeriod", "value": "'2'"}, {"name": "settleMethod", "value": "'1'"}, {"name": "accountPeriodStartDay", "value": "'0'"}, {"name": "accountPeriod", "value": "'30'"}, {"name": "grossProfitCompensate", "value": "'2'"}, {"name": "paymentFreeze", "value": "'0'"}, {"name": "generateZeroSettleSheet", "value": "'0'"}, {"name": "checkStock", "value": "'0'"}, {"name": "checkCost", "value": "'0'"}, {"name": "expected", "value": "{'code': 0, 'data': '操作成功', 'message': 'None', 'succ': True}"}], "start": 1605236175827, "stop": 1605236186081, "uuid": "53cddd5d-de7a-4be7-a9b6-5d2527fb841b", "historyId": "112383e9a62a23963ae7f55bc023d4ef", "testCaseId": "07431efe06ae0761c8af266c4a04af92", "fullName": "DF_supplier.test_supplier.TestClass_card#test_add_supplier_cards_02", "labels": [{"name": "story", "value": "新增供应商卡号"}, {"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "DF_supplier"}, {"name": "suite", "value": "test_supplier"}, {"name": "subSuite", "value": "TestClass_card"}, {"name": "host", "value": "DESKTOP-M9P26OI"}, {"name": "thread", "value": "52920-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "DF_supplier.test_supplier"}]}